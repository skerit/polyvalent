package rocks.blackblock.polyvalent;

import io.github.theepicblock.polymc.api.PolyMap;
import io.github.theepicblock.polymc.api.PolyMcEntrypoint;
import io.github.theepicblock.polymc.api.PolyRegistry;
import io.github.theepicblock.polymc.api.block.BlockStateProfile;
import io.github.theepicblock.polymc.api.misc.PolyMapProvider;
import io.github.theepicblock.polymc.impl.PolyMcCommands;
import io.github.theepicblock.polymc.impl.generator.Generator;
import net.fabricmc.api.DedicatedServerModInitializer;
import net.fabricmc.fabric.api.networking.v1.ServerPlayNetworking;
import net.fabricmc.loader.api.FabricLoader;
import net.minecraft.block.Block;
import net.minecraft.block.BlockState;
import rocks.blackblock.polyvalent.block.PolyvalentBlock;
import rocks.blackblock.polyvalent.networking.TempPlayerLoginAttachments;
import rocks.blackblock.polyvalent.polymc.PolyvalentGenerator;
import rocks.blackblock.polyvalent.polymc.PolyvalentMap;
import rocks.blackblock.polyvalent.polymc.PolyvalentRegistry;
import rocks.blackblock.polyvalent.server.PolyvalentCommands;

import java.util.HashMap;
import java.util.List;

public class PolyvalentServer implements DedicatedServerModInitializer {

    private static PolyvalentMap map = null;

    // The profile to use for full material blocks
    public static final BlockStateProfile WOOD_BLOCK_PROFILE = Polyvalent.createBlockStateProfile("polyvalent_material_block", Polyvalent.WOOD_BLOCK);
    public static final BlockStateProfile GLOW_BLOCK_PROFILE = Polyvalent.createBlockStateProfile("glow_material_block", Polyvalent.GLOW_BLOCK);

    public static final HashMap<String, Integer> BLOCK_STATE_ID_MAP = new HashMap<>();

    /**
     * Generate our own polymap
     *
     * @deprecated this is an internal method you shouldn't call.
     */
    public static void generatePolyMap() {

        if (map != null) {
            throw new IllegalStateException("Polyvalent PolyMap already generated!");
        }

        PolyvalentRegistry registry = new PolyvalentRegistry();

        // Register default global ItemPolys
        PolyvalentGenerator.addDefaultGlobalItemPolys(registry);

        // Let mods register polys via the api
        List<PolyMcEntrypoint> entrypoints = FabricLoader.getInstance().getEntrypoints("polymc", PolyMcEntrypoint.class);
        for (PolyMcEntrypoint entrypointEntry : entrypoints) {
            entrypointEntry.registerPolys(registry);
        }

        // Auto generate the rest
        PolyvalentGenerator.generateMissing(registry);

        map = registry.build();

        System.out.println("Generated PolyMap: " + map);
    }

    /**
     * Returns the polymap built with Polyvalent
     *
     * @return the main PolyMap generated by polyvalent
     */
    @Deprecated
    public static PolyvalentMap getMainMap() {
        if (map == null) {
            throw new NullPointerException("Tried to access the PolyMap before it was initialized");
        }
        return map;
    }

    @Override
    public void onInitializeServer() {

        if (!FabricLoader.getInstance().isModLoaded("polymc")) {
            throw new IllegalStateException("Polyvalent must be used together with PolyMc on the server");
        }

        PolyvalentCommands.registerCommands();

        PolyMapProvider.EVENT.register(player -> {
            System.out.println("Checking if player has PolyValent!");

            TempPlayerLoginAttachments player_login = (TempPlayerLoginAttachments) player;

            System.out.println("Has PolyValent: " + player_login.hasPolyvalent());

            if (player_login.hasPolyvalent()) {
                System.out.println(" -- Yes, sending poly map!");
                return player_login.getPolyvalentMap();
            }

            return null;
        });

        // Create a map to all the state ids
        for (BlockState state : Block.STATE_IDS) {
            Block block = state.getBlock();

            if (block instanceof PolyvalentBlock) {
                String state_name = state.toString();
                int id = Block.STATE_IDS.getRawId(state);
                BLOCK_STATE_ID_MAP.put(state_name, id);
            }
        }
    }

}
